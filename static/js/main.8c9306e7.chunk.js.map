{"version":3,"sources":["components/Sender/Sender.tsx","lib/WeirdToNormalResponseAdapter.ts","components/Receiver/Receiver.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SenderForm","styled","form","Sender","sendMessage","useState","name","setName","email","setEmail","message","setMessage","onSubmit","e","preventDefault","status","data","parameters","msg","htmlFor","type","id","required","onChange","target","value","WeirdToNormalResponseAdapter","response","this","RenderContainer","div","Receiver","receiveMessage","setResponse","useEffect","console","log","map","el","idx","key","Container","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"s0BAIA,IAAMA,EAAaC,IAAOC,KAAV,KAqCHC,EAAS,SAAC,GAAgD,IAA9CC,EAA6C,EAA7CA,YAA6C,EAC5CC,mBAAS,IADmC,mBAC7DC,EAD6D,KACvDC,EADuD,OAE1CF,mBAAS,IAFiC,mBAE7DG,EAF6D,KAEtDC,EAFsD,OAGtCJ,mBAAS,IAH6B,mBAG7DK,EAH6D,KAGpDC,EAHoD,KAoBpE,OACE,6BACE,kBAACX,EAAD,CAAYY,SAjBM,SAACC,GACrBA,EAAEC,iBAWFV,EAVqC,CACnCW,OAAQ,IACRC,KAAM,CACJA,KAAM,CAAC,CAACR,EAAOF,IACfW,WAAY,CACVF,OAAQ,IACRG,IAAKR,QAUP,sCACA,2BAAOS,QAAQ,aAAf,cACA,2BACEC,KAAK,OACLC,GAAG,YACHC,UAAQ,EACRC,SAAU,SAACV,GAAD,OAAON,EAAQM,EAAEW,OAAOC,UAEpC,2BAAON,QAAQ,cAAf,eACA,2BACEC,KAAK,QACLC,GAAG,aACHC,UAAQ,EACRC,SAAU,SAACV,GAAD,OAAOJ,EAASI,EAAEW,OAAOC,UAErC,2BAAON,QAAQ,gBAAf,iBACA,8BACEE,GAAG,eACHC,UAAQ,EACRC,SAAU,SAACV,GAAD,OAAOF,EAAWE,EAAEW,OAAOC,UAEvC,2BAAOL,KAAK,SAASK,MAAM,Y,QCtEpBC,EAPb,WAAYC,GAA0B,yBAJtCZ,YAIqC,OAHrCC,UAGqC,OAFrCE,SAEqC,EACnCU,KAAKb,OAASY,EAASZ,OADY,kBAErBY,EAASX,KAAKA,KAFO,GAElCY,KAAKZ,KAF6B,KAGnCY,KAAKV,IAAMS,EAASX,KAAKC,WAAWC,K,4YCLxC,IAAMW,EAAkB5B,IAAO6B,IAAV,KAwBRC,EAAW,SAAC,GAIlB,IAHLC,EAGI,EAHJA,eAGI,EAC4B3B,mBAAgC,MAD5D,mBACGsB,EADH,KACaM,EADb,KAWJ,OARAC,qBAAU,WACJF,EACFC,EAAY,IAAIP,EAA6BM,IAE7CG,QAAQC,IAAI,eAEb,CAACJ,IAGF,kBAACH,EAAD,KACE,wCACA,sCACU,qCAAOF,QAAP,IAAOA,OAAP,EAAOA,EAAUZ,SAE3B,0CACCY,EACC,4BACGA,EAASX,KAAKqB,KAAI,SAACC,EAAYC,GAAb,OACjB,wBAAIC,IAAKD,GAAMD,OAGjB,KACJ,uCACW,qCAAOX,QAAP,IAAOA,OAAP,EAAOA,EAAUT,Q,mKCtDlC,IAAMuB,EAAYxC,IAAO6B,IAAV,KAkBAY,MAXf,WAAgB,IAAD,EACiBrC,mBAA+B,MADhD,mBACNK,EADM,KACGC,EADH,KAGb,OACE,kBAAC8B,EAAD,CAAWE,UAAU,OACnB,kBAAC,EAAD,CAAQvC,YAAaO,IACrB,kBAAC,EAAD,CAAUqB,eAAgBtB,MCPZkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMnD,c","file":"static/js/main.8c9306e7.chunk.js","sourcesContent":["import React, { FormEvent, useState } from \"react\";\nimport WeirdResponse from \"../../lib/WeirdResponse\";\nimport styled from \"styled-components\";\n\nconst SenderForm = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 500px;\n  border: 1px solid black;\n  box-shadow: 0 5px 20px -10px;\n  padding: 20px;\n\n  label {\n    margin-top: 10px;\n    align-self: flex-start;\n  }\n\n  input,\n  textarea {\n    font-size: 1.1em;\n    width: 100%;\n    margin: 20px 0;\n  }\n\n  input {\n    box-sizing: border-box;\n  }\n\n  input[type=\"submit\"] {\n    width: 100px;\n    align-self: flex-end;\n    margin: 0;\n  }\n\n  textarea {\n    height: 200px;\n  }\n`;\n\nexport const Sender = ({ sendMessage }: { sendMessage: Function }) => {\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [message, setMessage] = useState(\"\");\n\n  const submitHandler = (e: FormEvent): void => {\n    e.preventDefault();\n    const messageToSend: WeirdResponse = {\n      status: 200,\n      data: {\n        data: [[email, name]],\n        parameters: {\n          status: 200,\n          msg: message,\n        },\n      },\n    };\n    sendMessage(messageToSend);\n  };\n\n  return (\n    <div>\n      <SenderForm onSubmit={submitHandler}>\n        <h1>Sender</h1>\n        <label htmlFor=\"send-name\">Enter name</label>\n        <input\n          type=\"text\"\n          id=\"send-name\"\n          required\n          onChange={(e) => setName(e.target.value)}\n        />\n        <label htmlFor=\"send-email\">Enter email</label>\n        <input\n          type=\"email\"\n          id=\"send-email\"\n          required\n          onChange={(e) => setEmail(e.target.value)}\n        />\n        <label htmlFor=\"send-message\">Enter message</label>\n        <textarea\n          id=\"send-message\"\n          required\n          onChange={(e) => setMessage(e.target.value)}\n        ></textarea>\n        <input type=\"submit\" value=\"Send\" />\n      </SenderForm>\n    </div>\n  );\n};\n","import NormalResponse from \"./NormalResponse\";\nimport WeirdResponse from \"./WeirdResponse\";\n\nclass WeirdToNormalResponseAdapter implements NormalResponse {\n  status: number;\n  data: any[];\n  msg: string;\n\n  constructor(response: WeirdResponse) {\n    this.status = response.status;\n    [this.data] = response.data.data;\n    this.msg = response.data.parameters.msg;\n  }\n}\n\nexport default WeirdToNormalResponseAdapter;\n","import React, { useEffect, useState } from \"react\";\nimport NormalResponse from \"../../lib/NormalResponse\";\nimport WeirdToNormalResponseAdapter from \"../../lib/WeirdToNormalResponseAdapter\";\nimport styled from \"styled-components\";\nimport WeirdResponse from \"../../lib/WeirdResponse\";\n\nconst RenderContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: 20%;\n  border: 1px solid black;\n  box-shadow: 0 5px 20px -10px;\n  padding: 20px;\n\n  ul {\n    margin: 0;\n    align-self: flex-start;\n  }\n\n  p {\n    width: 100%;\n\n    span {\n      float: right;\n    }\n  }\n`;\n\nexport const Receiver = ({\n  receiveMessage,\n}: {\n  receiveMessage: WeirdResponse | null;\n}) => {\n  const [response, setResponse] = useState<NormalResponse | null>(null);\n\n  useEffect(() => {\n    if (receiveMessage) {\n      setResponse(new WeirdToNormalResponseAdapter(receiveMessage));\n    } else {\n      console.log(\"sdfsdfsdf\");\n    }\n  }, [receiveMessage]);\n\n  return (\n    <RenderContainer>\n      <h1>Receiver</h1>\n      <p>\n        Status: <span>{response?.status}</span>\n      </p>\n      <p>Data array:</p>\n      {response ? (\n        <ul>\n          {response.data.map((el: string, idx: number) => (\n            <li key={idx}>{el}</li>\n          ))}\n        </ul>\n      ) : null}\n      <p>\n        Message: <span>{response?.msg}</span>\n      </p>\n    </RenderContainer>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Sender } from \"./components/Sender/Sender\";\nimport { Receiver } from \"./components/Receiver/Receiver\";\nimport WeirdResponse from \"./lib/WeirdResponse\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n`;\n\nfunction App() {\n  const [message, setMessage] = useState<WeirdResponse | null>(null);\n\n  return (\n    <Container className=\"App\">\n      <Sender sendMessage={setMessage} />\n      <Receiver receiveMessage={message} />\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}